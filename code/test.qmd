```{python}
import rasterio
from rasterio.warp import calculate_default_transform, reproject, Resampling
from pyproj import Proj, transform
```


```{python}

import rasterio
from rasterio.warp import calculate_default_transform, reproject, Resampling

def reproject_raster_to_custom_crs(custom_crs_wkt, input_file_path, output_file_path):
    # Open source raster
    srcRst = rasterio.open(input_file_path)

    # Define the custom CRS from the provided WKT
    dst_crs = custom_crs_wkt

    # Calculate transform array and shape of reprojected raster
    transform, width, height = calculate_default_transform(
        srcRst.crs, dst_crs, srcRst.width, srcRst.height, *srcRst.bounds)

    # Update the metadata for the destination raster
    kwargs = srcRst.meta.copy()
    kwargs.update({
        'crs': dst_crs,
        'transform': transform,
        'width': width,
        'height': height,
        'compress': 'lzw'
    })

    # Open the destination raster
    with rasterio.open(output_file_path, 'w', **kwargs) as dstRst:
        # Reproject and save raster band data
        for i in range(1, srcRst.count + 1):
            reproject(
                source=rasterio.band(srcRst, i),
                destination=rasterio.band(dstRst, i),
                src_transform=srcRst.transform,
                src_crs=srcRst.crs,
                dst_transform=transform,
                dst_crs=dst_crs,
                resampling=Resampling.nearest)



custom_crs = """
PROJCS["Custom LAEA Borneo",
    GEOGCS["WGS 84",
        DATUM["WGS_1984",
            SPHEROID["WGS 84",6378137,298.257223563,
                AUTHORITY["EPSG","7030"]],
            AUTHORITY["EPSG","6326"]],
        PRIMEM["Greenwich",0],
        UNIT["degree",0.0174532925199433],
        AUTHORITY["EPSG","4326"]],
    PROJECTION["Lambert_Azimuthal_Equal_Area"],
    PARAMETER["latitude_of_center",0],
    PARAMETER["longitude_of_center",115],
    PARAMETER["false_easting",0],
    PARAMETER["false_northing",0],
    UNIT["metre",1,
        AUTHORITY["EPSG","9001"]],
    AUTHORITY["EPSG","6931"]]
"""
input_file_path = '/Users/robinpfaff/Library/CloudStorage/OneDrive-ZHAW/6_Semester/BA/07_data_prepared/oil_palm/detection_year_2000_2017.tif'
output_file_path = 'test.tif'
reproject_raster_to_custom_crs(custom_crs, input_file_path, output_file_path)


import pyproj

try:
    custom_crs_obj = pyproj.CRS(custom_crs)
    print(custom_crs_obj)
except pyproj.exceptions.CRSError as e:
    print("Invalid CRS:", e)

```

```{python}
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature

# Create a Lambert Azimuthal Equal Area projection centered on Borneo
projection = ccrs.LambertAzimuthalEqualArea(central_longitude=115, central_latitude=0)

# Create a figure and axis with the specified projection
fig, ax = plt.subplots(subplot_kw={'projection': projection}, figsize=(10, 10))

# Add map features
ax.add_feature(cfeature.LAND, edgecolor='black')
ax.add_feature(cfeature.COASTLINE, edgecolor='black')
ax.add_feature(cfeature.BORDERS, edgecolor='black')
ax.set_global()

# Add a title
ax.set_title('World Map Centered on Borneo (LAEA Projection)')

# Show the plot
plt.show()

```


```{python}

import rasterio
from pyproj import CRS, Transformer
from rasterio.warp import reproject, Resampling
from rasterio.enums import Compression

# Definieren das benutzerdefinierte CRS in WKT-Format
custom_crs_wkt = (
    'PROJCS["Custom Lambert Azimuthal Equal Area",'
    'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",'
    'SPHEROID["WGS_1984",6378137,298.257223563]],'
    'PRIMEM["Greenwich",0],'
    'UNIT["Degree",0.017453292519943295],'
    'AUTHORITY["EPSG","4326"]],'
    'PROJECTION["Lambert_Azimuthal_Equal_Area"],'
    'PARAMETER["latitude_of_center",0],'
    'PARAMETER["longitude_of_center",115],'
    'UNIT["Meter",1],'
    'AUTHORITY["Custom_CRS","1001"]]'
)

input_raster_path = "/Users/robinpfaff/Library/CloudStorage/OneDrive-ZHAW/6_Semester/BA/06_data/vegetation/oil_palm/High_resolution_global_industrial_and_smallholder_oil_palm_map_for_2019/oil_palm_map/L2_2019b_2180.tif"
output_raster_path = 'test.tif'

# Öffnen Sie das Eingabebild
with rasterio.open(input_raster_path) as src:
    # Holen Sie sich die Informationen über das ursprüngliche CRS
    src_crs = src.crs

    # Erstellen Sie ein neues CRS-Objekt aus dem WKT-String
    custom_crs = CRS.from_string(custom_crs_wkt)

    # Erstellen Sie einen Transformer, um zwischen den CRS zu transformieren
    transformer = Transformer.from_crs(src_crs, custom_crs, always_xy=True)

    # Erstellen Sie das Ziel-Raster mit dem benutzerdefinierten CRS
    profile = src.profile.copy()
    profile['crs'] = custom_crs

    # Aktualisieren Sie die Kompressionsmethode auf LZW
    #profile.update(compress=Compression.lzw)

    # Öffnen Sie das Ziel-Raster für das Schreiben
    with rasterio.open(output_raster_path, 'w', **profile) as dst:
        for idx in range(src.count):
            # Reprojizieren Sie jedes Band des Rasters
            reproject(
                source=rasterio.band(src, idx + 1),
                destination=rasterio.band(dst, idx + 1),
                src_transform=src.transform,
                src_crs=src.crs,
                dst_transform=dst.transform,
                dst_crs=dst.crs,
                resampling=Resampling.bilinear

            )



```


```{python}
import rasterio
from rasterio.warp import calculate_default_transform, reproject, Resampling
from rasterio.crs import CRS

def reproject_raster(wkt_crs, input_file_path, output_file_path):
    # Open source raster
    srcRst = rasterio.open(input_file_path)

    # Define the custom CRS using WKT
    custom_crs = CRS.from_string(wkt_crs)

    # Calculate transform array and shape of reprojected raster
    transform, width, height = calculate_default_transform(
        srcRst.crs, custom_crs, srcRst.width, srcRst.height, *srcRst.bounds)

    # Update the metadata for the destination raster
    kwargs = srcRst.meta.copy()
    kwargs.update({
        'crs': custom_crs,
        'transform': transform,
        'width': width,
        'height': height,
        'compress': 'lzw'
    })

    # Open destination raster
    dstRst = rasterio.open(output_file_path, 'w', **kwargs)

    # Reproject and save raster band data
    for i in range(1, srcRst.count + 1):
        reproject(
            source=rasterio.band(srcRst, i),
            destination=rasterio.band(dstRst, i),
            src_transform=srcRst.transform,
            src_crs=srcRst.crs,
            dst_transform=transform,
            dst_crs=custom_crs,
            resampling=Resampling.nearest)

    # Close destination raster
    dstRst.close()

# Example usage:
custom_wkt_crs = (
    'PROJCS["Custom Lambert Azimuthal Equal Area",'
    'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",'
    'SPHEROID["WGS_1984",6378137,298.257223563]],'
    'PRIMEM["Greenwich",0],'
    'UNIT["Degree",0.017453292519943295],'
    'AUTHORITY["EPSG","4326"]],'
    'PROJECTION["Lambert_Azimuthal_Equal_Area"],'
    'PARAMETER["latitude_of_center",0],'
    'PARAMETER["longitude_of_center",115],'
    'UNIT["Meter",1],'
    'AUTHORITY["Custom_CRS","1001"]]'
)
input_raster_path = "/Users/robinpfaff/Library/CloudStorage/OneDrive-ZHAW/6_Semester/BA/06_data/vegetation/oil_palm/High_resolution_global_industrial_and_smallholder_oil_palm_map_for_2019/oil_palm_map/L2_2019b_2180.tif"
output_raster_path = 'test.tif'
reproject_raster(custom_wkt_crs, input_raster_path, output_raster_path)

```


```{python}
import geopandas as gpd
from pyproj import CRS
import osmnx as ox

def reproject_shapefile(input_shapefile, output_shapefile, custom_wkt_crs = (
    'PROJCS["Custom Lambert Azimuthal Equal Area",'
    'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",'
    'SPHEROID["WGS_1984",6378137,298.257223563]],'
    'PRIMEM["Greenwich",0],'
    'UNIT["Degree",0.017453292519943295],'
    'AUTHORITY["EPSG","4326"]],'
    'PROJECTION["Lambert_Azimuthal_Equal_Area"],'
    'PARAMETER["latitude_of_center",0],'
    'PARAMETER["longitude_of_center",115],'
    'UNIT["Meter",1],'
    'AUTHORITY["Custom_CRS","1001"]]'
    )):
    # Read the input shapefile
    gdf = gpd.read_file(input_shapefile)

    # Define the custom CRS using WKT
    custom_crs = CRS.from_string(custom_wkt_crs)

    # Reproject the GeoDataFrame to the custom CRS
    gdf_reprojected = gdf.to_crs(custom_crs)

    # Save the reprojected GeoDataFrame to a new shapefile
    gdf_reprojected.to_file(output_shapefile)

# Use OSMnx to geocode and get a boundary polygon
gdf_boundary = ox.geocode_to_gdf("Borneo").dropna(axis=1, how="any")

# Save the boundary polygon GeoDataFrame to a shapefile
input_shapefile = 'boundary.shp'
gdf_boundary.to_file(input_shapefile)

output_shapefile = 'reprojected_boundary.shp'

reproject_shapefile(input_shapefile, output_shapefile, custom_wkt_crs)


```